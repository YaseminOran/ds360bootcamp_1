"""
BASIT MARKET SEPETƒ∞ ANALƒ∞Zƒ∞
Bu dosya √∂ƒürenciler i√ßin Market Basket Analysis'in temellerini √∂ƒüretmek amacƒ±yla yazƒ±lmƒ±≈ütƒ±r.
"""

import pandas as pd
import numpy as np
from itertools import combinations
import matplotlib.pyplot as plt
import seaborn as sns


class BasitMarketAnalizi:
    """
    Market Sepeti Analizi i√ßin basit ve anla≈üƒ±lƒ±r sƒ±nƒ±f
    """
    
    def __init__(self):
        self.veri = None
        self.sepetler = []
        self.urun_sayilari = {}
        self.birliktelikler = {}
        
    def veri_yukle(self, dosya_yolu):
        """
        Veriyi y√ºkler ve sepet formatƒ±na √ßevirir
        """
        print("üìÅ Veri y√ºkleniyor...")
        
        # CSV dosyasƒ±nƒ± oku
        self.veri = pd.read_csv(dosya_yolu, index_col=0)
        print(f"‚úÖ Veri y√ºklendi: {self.veri.shape[0]} sepet, {self.veri.shape[1]} √ºr√ºn")
        
        # Sepetleri olu≈ütur (True olan √ºr√ºnleri liste haline getir)
        for i, satir in self.veri.iterrows():
            sepet = []
            for urun in self.veri.columns:
                if satir[urun] == True or satir[urun] == 'True':
                    sepet.append(urun)
            if sepet:  # Bo≈ü sepetleri ekleme
                self.sepetler.append(sepet)
        
        print(f"‚úÖ {len(self.sepetler)} sepet hazƒ±rlandƒ±")
        return self.veri
    
    def temel_istatistikler(self):
        """
        Veri hakkƒ±nda temel bilgileri g√∂sterir
        """
        print("\nüìä TEMEL ƒ∞STATƒ∞STƒ∞KLER")
        print("=" * 40)
        
        # Toplam sepet sayƒ±sƒ±
        print(f"Toplam sepet sayƒ±sƒ±: {len(self.sepetler)}")
        
        # Her sepetteki ortalama √ºr√ºn sayƒ±sƒ±
        sepet_boyutlari = [len(sepet) for sepet in self.sepetler]
        print(f"Ortalama √ºr√ºn/sepet: {np.mean(sepet_boyutlari):.1f}")
        print(f"En fazla √ºr√ºn/sepet: {max(sepet_boyutlari)}")
        print(f"En az √ºr√ºn/sepet: {min(sepet_boyutlari)}")
        
        # √úr√ºn pop√ºlaritesi
        self._urun_popularitesini_hesapla()
        
        print(f"\nEn pop√ºler 5 √ºr√ºn:")
        sorted_urunler = sorted(self.urun_sayilari.items(), key=lambda x: x[1], reverse=True)
        for urun, sayi in sorted_urunler[:5]:
            yuzde = (sayi / len(self.sepetler)) * 100
            print(f"  {urun}: {sayi} sepet (%{yuzde:.1f})")
    
    def _urun_popularitesini_hesapla(self):
        """
        Her √ºr√ºn√ºn ka√ß sepette olduƒüunu hesaplar
        """
        self.urun_sayilari = {}
        for sepet in self.sepetler:
            for urun in sepet:
                if urun in self.urun_sayilari:
                    self.urun_sayilari[urun] += 1
                else:
                    self.urun_sayilari[urun] = 1
    
    def popular_urunleri_goster(self, top_n=10):
        """
        En pop√ºler √ºr√ºnleri grafik olarak g√∂sterir
        """
        if not self.urun_sayilari:
            self._urun_popularitesini_hesapla()
        
        # En pop√ºler N √ºr√ºn√º al
        sorted_urunler = sorted(self.urun_sayilari.items(), key=lambda x: x[1], reverse=True)
        top_urunler = sorted_urunler[:top_n]
        
        # Grafik olu≈ütur
        urunler = [item[0] for item in top_urunler]
        sayilar = [item[1] for item in top_urunler]
        
        plt.figure(figsize=(12, 6))
        bars = plt.bar(urunler, sayilar, color='skyblue', alpha=0.7)
        plt.title(f'En Pop√ºler {top_n} √úr√ºn', fontsize=16, fontweight='bold')
        plt.xlabel('√úr√ºnler', fontsize=12)
        plt.ylabel('Sepet Sayƒ±sƒ±', fontsize=12)
        plt.xticks(rotation=45, ha='right')
        
        # Barlarƒ±n √ºzerine sayƒ±larƒ± yaz
        for bar, sayi in zip(bars, sayilar):
            plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1, 
                    str(sayi), ha='center', va='bottom')
        
        plt.tight_layout()
        plt.show()
    
    def birliktelik_analizi(self, min_support=0.05):
        """
        ƒ∞ki √ºr√ºn arasƒ±ndaki birliktelikleri analiz eder
        min_support: Minimum destek oranƒ± (varsayƒ±lan %5)
        """
        print(f"\nüîó Bƒ∞RLƒ∞KTELƒ∞K ANALƒ∞Zƒ∞ (Min Support: %{min_support*100:.0f})")
        print("=" * 50)
        
        toplam_sepet = len(self.sepetler)
        min_sepet_sayisi = int(min_support * toplam_sepet)
        
        print(f"Minimum sepet sayƒ±sƒ±: {min_sepet_sayisi}")
        
        # T√ºm √ºr√ºn √ßiftlerini kontrol et
        tum_urunler = list(self.urun_sayilari.keys())
        birliktelik_sayilari = {}
        
        for sepet in self.sepetler:
            if len(sepet) >= 2:
                # Bu sepetteki t√ºm √ºr√ºn √ßiftleri
                for urun1, urun2 in combinations(sepet, 2):
                    # Alfabetik sƒ±raya koy (Apple, Bread yerine her zaman aynƒ± sƒ±ra)
                    if urun1 > urun2:
                        urun1, urun2 = urun2, urun1
                    
                    cift = (urun1, urun2)
                    if cift in birliktelik_sayilari:
                        birliktelik_sayilari[cift] += 1
                    else:
                        birliktelik_sayilari[cift] = 1
        
        # Minimum desteƒüi ge√ßen √ßiftleri filtrele
        onemli_birliktelikler = {}
        for cift, sayi in birliktelik_sayilari.items():
            if sayi >= min_sepet_sayisi:
                support = sayi / toplam_sepet
                onemli_birliktelikler[cift] = {
                    'sepet_sayisi': sayi,
                    'support': support
                }
        
        print(f"‚úÖ {len(onemli_birliktelikler)} √∂nemli birliktelik bulundu")
        
        # En g√º√ßl√º birliktelikleri g√∂ster
        if onemli_birliktelikler:
            print(f"\nEn g√º√ßl√º 10 birliktelik:")
            sorted_birliktelikler = sorted(onemli_birliktelikler.items(), 
                                         key=lambda x: x[1]['support'], reverse=True)
            
            for i, (cift, bilgi) in enumerate(sorted_birliktelikler[:10], 1):
                urun1, urun2 = cift
                print(f"{i:2d}. {urun1} + {urun2}: "
                      f"{bilgi['sepet_sayisi']} sepet "
                      f"(%{bilgi['support']*100:.1f})")
        
        self.birliktelikler = onemli_birliktelikler
        return onemli_birliktelikler
    
    def kural_analizi(self, min_confidence=0.3):
        """
        Association Rules (Birliktelik Kurallarƒ±) olu≈üturur
        min_confidence: Minimum g√ºven oranƒ± (varsayƒ±lan %30)
        """
        print(f"\nüìã KURAL ANALƒ∞Zƒ∞ (Min Confidence: %{min_confidence*100:.0f})")
        print("=" * 50)
        
        if not self.birliktelikler:
            print("‚ùå √ñnce birliktelik analizi yapmalƒ±sƒ±nƒ±z!")
            return
        
        kurallar = []
        toplam_sepet = len(self.sepetler)
        
        for (urun1, urun2), bilgi in self.birliktelikler.items():
            birlikte_sayi = bilgi['sepet_sayisi']
            
            # Kural 1: urun1 ‚Üí urun2
            urun1_sayi = self.urun_sayilari[urun1]
            confidence1 = birlikte_sayi / urun1_sayi
            
            if confidence1 >= min_confidence:
                lift1 = confidence1 / (self.urun_sayilari[urun2] / toplam_sepet)
                kurallar.append({
                    'antecedent': urun1,      # √ñnc√ºl
                    'consequent': urun2,      # Sonu√ß
                    'support': bilgi['support'],
                    'confidence': confidence1,
                    'lift': lift1
                })
            
            # Kural 2: urun2 ‚Üí urun1
            urun2_sayi = self.urun_sayilari[urun2]
            confidence2 = birlikte_sayi / urun2_sayi
            
            if confidence2 >= min_confidence:
                lift2 = confidence2 / (self.urun_sayilari[urun1] / toplam_sepet)
                kurallar.append({
                    'antecedent': urun2,
                    'consequent': urun1,
                    'support': bilgi['support'],
                    'confidence': confidence2,
                    'lift': lift2
                })
        
        print(f"‚úÖ {len(kurallar)} kural bulundu")
        
        if kurallar:
            # Kurallarƒ± g√ºvene g√∂re sƒ±rala
            kurallar.sort(key=lambda x: x['confidence'], reverse=True)
            
            print(f"\nEn g√º√ßl√º 10 kural:")
            print("-" * 80)
            print(f"{'No':<3} {'√ñnc√ºl':<15} {'‚Üí':<2} {'Sonu√ß':<15} {'G√ºven':<8} {'Lift':<8}")
            print("-" * 80)
            
            for i, kural in enumerate(kurallar[:10], 1):
                print(f"{i:<3} {kural['antecedent']:<15} ‚Üí {kural['consequent']:<15} "
                      f"{kural['confidence']:<8.1%} {kural['lift']:<8.2f}")
        
        return kurallar
    
    def onerileri_goster(self, secilen_urun, kurallar=None, top_n=5):
        """
        Belirli bir √ºr√ºn i√ßin √∂neriler g√∂sterir
        """
        print(f"\nüéØ '{secilen_urun}' √úR√úN√ú ƒ∞√áƒ∞N √ñNERƒ∞LER")
        print("=" * 50)
        
        if kurallar is None:
            print("‚ùå √ñnce kural analizi yapmalƒ±sƒ±nƒ±z!")
            return
        
        # Bu √ºr√ºn i√ßin ge√ßerli kurallarƒ± bul
        uygun_kurallar = [kural for kural in kurallar 
                         if kural['antecedent'] == secilen_urun]
        
        if not uygun_kurallar:
            print(f"‚ùå '{secilen_urun}' i√ßin √∂neri bulunamadƒ±.")
            return
        
        # G√ºvene g√∂re sƒ±rala
        uygun_kurallar.sort(key=lambda x: x['confidence'], reverse=True)
        
        print(f"‚úÖ {len(uygun_kurallar)} √∂neri bulundu:")
        print()
        
        for i, kural in enumerate(uygun_kurallar[:top_n], 1):
            print(f"{i}. {kural['consequent']}")
            print(f"   G√ºven: %{kural['confidence']*100:.1f}")
            print(f"   Lift: {kural['lift']:.2f}")
            print(f"   A√ßƒ±klama: '{secilen_urun}' alan m√º≈üterilerin "
                  f"%{kural['confidence']*100:.0f}'i '{kural['consequent']}' da alƒ±yor")
            print()
    
    def ozet_rapor(self):
        """
        Analiz sonu√ßlarƒ±nƒ±n √∂zetini verir
        """
        print("\nüìù √ñZET RAPOR")
        print("=" * 40)
        
        if not self.veri is None:
            print(f"üî∏ Toplam sepet sayƒ±sƒ±: {len(self.sepetler)}")
            print(f"üî∏ Toplam √ºr√ºn √ße≈üidi: {len(self.urun_sayilari)}")
            
            if self.birliktelikler:
                print(f"üî∏ Bulunan birliktelik sayƒ±sƒ±: {len(self.birliktelikler)}")
                
                # En pop√ºler √ºr√ºn
                en_populer = max(self.urun_sayilari.items(), key=lambda x: x[1])
                print(f"üî∏ En pop√ºler √ºr√ºn: {en_populer[0]} ({en_populer[1]} sepet)")
                
                # En g√º√ßl√º birliktelik
                en_guclu = max(self.birliktelikler.items(), key=lambda x: x[1]['support'])
                urun1, urun2 = en_guclu[0]
                support = en_guclu[1]['support']
                print(f"üî∏ En g√º√ßl√º birliktelik: {urun1} + {urun2} (%{support*100:.1f})")


def main():
    """
    Ana program - adƒ±m adƒ±m Market Basket Analysis
    """
    print("üõí MARKET SEPETƒ∞ ANALƒ∞Zƒ∞")
    print("=" * 50)
    print("Bu program market sepetlerindeki √ºr√ºn birlikteliklerini analiz eder.")
    print()
    
    # 1. Analiz nesnesini olu≈ütur
    analiz = BasitMarketAnalizi()
    
    # 2. Veriyi y√ºkle
    veri = analiz.veri_yukle('data/basket_analysis.csv')
    
    # 3. Temel istatistikleri g√∂ster
    analiz.temel_istatistikler()
    
    # 4. Pop√ºler √ºr√ºnleri g√∂ster
    print("\nüìä En pop√ºler √ºr√ºnlerin grafiƒüi √ßiziliyor...")
    analiz.popular_urunleri_goster(top_n=8)
    
    # 5. Birliktelik analizi
    birliktelikler = analiz.birliktelik_analizi(min_support=0.05)
    
    # 6. Kural analizi
    kurallar = analiz.kural_analizi(min_confidence=0.3)
    
    # 7. √ñrnek √∂neriler
    if kurallar:
        print("\n" + "="*50)
        print("√ñRNEK √ñNERƒ∞LER")
        analiz.onerileri_goster('Milk', kurallar, top_n=3)
        analiz.onerileri_goster('Bread', kurallar, top_n=3)
    
    # 8. √ñzet rapor
    analiz.ozet_rapor()
    
    print("\n‚úÖ Analiz tamamlandƒ±!")


if __name__ == "__main__":
    main()